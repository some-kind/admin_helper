##############################################################################
###                                                                        ###
###                   THIS IS A EXAMPLE OF ANSIBLE PLAYBOOK                ###
###     НЕ ЗАПУСКАЙТЕ ЭТОТ ПЛЕЙБУК, ОН МОЖЕТ ИСПОРТИТЬ ВАШУ СИСТЕМУ!!!     ###
###                                                                        ###
##############################################################################
---
- name: "Первый плэй в плэйбуке"
  strategy: free  # определение стратегии выполнения
                  # linear - основная линейная, ждём выполнения предыдущей задачи
                  # debug - каждый шаг делается с дебагом - странная фигня
                  # free - самая быстрая, никто никого не ждёт
                  # есть ещё
  serial: "30%"   # указывает, сколько подключений forks от максимального количества будет использовано стратегией free
  hosts: all  # указываем группу хостов, для которых выполняется данный play (группы указаны в hosts.ini)
  become: true  # использовать ли sudo для админки (в большинстве случаев нужна)
  gather_facts: True  # сбор фактов о хостах, по умолчанию включен
  gather_subset: all:!hardware  # ограничение сбора фактов. В данном случае, собираем все, но не собираем данные о желез
                # all - все факты
                # min - минимальный набор (ОС, ip, что-то ещё)
                # hardware - железо, самый долгий сбор фактов
                # network - сетевые интерфейсы
                # virtual - сетевые устройства
                # ohai - собрать данные через chef
                # facter - собрать данные через puppet

  vars:  # переменные
    php_version: 7.4  # переменные могут быть как единичные, так и списки. По спискам удобно потом пускать циклы
    packages:
      - python3
      - python3-pip
      - python3-setuptools
      - libselinux-python3
    pip_packages:
      - six
      - docker
      - requests

  # блок тасок, которые выполняются в самом начале
  # например, вывод серверов из прод балансировщика перед работой
  pre-tasks:
  - name: "Install python and pip"
    ansible.builtin.yum:  # модуль работы с менеджером yum
      name: "{{ packages }}" # можно передавать списки, в те модули что их поддерживают, как правило это быстрее
      state: present      # если пакет уже установлен, даже старой версии, обновляться он не будет
      update_cache: true  # обновить кэш менеджера пакетов (как apt update)

  # блок вызова ролей - наборов тасок
  roles:

  - nginx # роли могут быть ваши собственные в папках данного плэйбука
          # для удобства создания всех папок роли лучше использовать команду ansible-galaxy role init <имя_роли>
  - geerlingay.postgresql  # роли могут быть скачаны из ansible-galaxy или github в общий каталог ~/.ansible

  # блок тасок, которые будут выполняться после ролей (если роли вообще были)
  tasks:

  - name: "Асинхронная таска, не тормозит другие"
    ansible.builtin.apt:  # модуль менеджера пакетов apt
      name: vim           # указываем пакет
      state: latest       # состояние - нас интересует, чтобы стояла последняя версия vim
    async: 1000   # тайм-аут асинхронной таски (в секундах???)
    poll: 0       # всегда ставьте 0, иначе ваша "асинхронная" таска всё равно будет тормозить другие
    register: vim_async_task  # регистрируем выполнение этой таски в переменную


  # блок тасок, которые будут выполняться в самом конце
  # обычно это различные хелс-чеки или, например, ввод серверов обратно в прод. балансировщик
  post-tasks:

    - name: "Хелс чек асинхронной таски"
      async_status:
        jid: "{{ vim_async_task.ansible_job_id }}"  # указываем, какую таску проверяем
      register: async_task_result  # переменная, куда записываем результат проверки
      until: async_task_result.finished  # проверяем, что таска завершилась
      retries: 100  # количество попыток успешной проверки

